version: '3.8'

services:

  postgres:
    image: postgres:14
    container_name: postgres_big_data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: bigdata
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-conf:/etc/postgresql/conf.d
    secrets:
      - postgres_password

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper_big_data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka_big_data
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    container_name: schema_registry_big_data
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    ports:
      - "8081:8081"

  connect:
    image: debezium/connect:2.2
    container_name: debezium_connect_big_data
    depends_on:
      - kafka
      - postgres
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: /kafka/connect-plugins

  simulator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: business_simulator
    depends_on:
      - postgres
    environment:
      CSV_DIR: /app/data
      PASSWORD: /run/secrets/postgres_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
    command: ["python", "app.py", "--csv_dir", "/app/data", "--password", "/run/secrets/postgres_password"]
    secrets:
      - postgres_password
    volumes:
      - ./data:/app/data
      - ./src:/app

  kafka-consumer:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    container_name: kafka_consumer
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: debezium-consumer-group
      TOPIC: test

  spark:
    image: bitnami/spark:3.3.2
    container_name: spark_big_data
    depends_on:
      - kafka
      - schema-registry
    environment:
      SPARK_MODE: "master"
      SPARK_MASTER_HOST: spark
    volumes:
      - ./spark-jobs:/opt/spark-apps
    command: >
      /opt/bitnami/scripts/spark/entrypoint.sh spark-submit
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.2,
                 io.delta:delta-core_2.12:2.1.0,
                 com.databricks:spark-avro_2.12:3.3.2
      /opt/spark-apps/streaming_job.py

  minio:
    image: minio/minio:RELEASE.2024-03-15T00-00-04Z
    container_name: minio_big_data
    command: server /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

volumes:
  pgdata:
  miniodata:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt

networks:
  default:
    name: big_data_network
