services:

  postgres:
    image: postgres:14
    container_name: postgres_big_data
    networks:
      - big_data_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: bigdata
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-conf/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    networks:
      - big_data_network
    container_name: zookeeper_big_data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - kafka

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka_big_data
    networks:
      - big_data_network
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    networks:
      - big_data_network
    container_name: schema_registry_big_data
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - kafka

  connect:
    image: confluentinc/cp-kafka-connect:7.6.0
    ports:
      - "8083:8083"
    networks:
      - big_data_network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    volumes:
      - ./connectors:/etc/kafka-connect/connectors
#    entrypoint: "tail -f /dev/null"
#            mv /usr/share/confluent-hub-components/debezium-debezium-connector-postgresql /usr/share/java &&
    command: >
      bash -c "
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.5.4 &&

      (
          echo 'Waiting for Kafka Connect REST API to become available...';
          until curl -s localhost:8083/connectors; do sleep 3; done;
          echo 'Registering connector...';
          curl -s -X POST http://localhost:8083/connectors -H 'Content-Type: application/json' -d @/etc/kafka-connect/connectors/postgres-connector.json || true
      ) &
      /etc/confluent/docker/run 
      "
    profiles:
      - kafka
    healthcheck:
      test:
        bash -c "
          curl -s localhost:8083/connectors | grep -q '\[\s*\]' && exit 1 || exit 0
        "

  simulator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: business_simulator
    networks:
      - big_data_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      CSV_DIR: /app/data
      PASSWORD: /run/secrets/postgres_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
    command: ["python", "app.py", "--csv_dir", "/app/data"]
    secrets:
      - postgres_password
    volumes:
      - ./src/data:/app/data
      - ./src:/app
    healthcheck:
      test: [ "CMD-SHELL", "python - << 'EOF'\nimport psycopg2, os; \nconn = psycopg2.connect(host=os.getenv('POSTGRES_HOST'), port=os.getenv('POSTGRES_PORT'), user='postgres', password=open(os.getenv('PASSWORD')).read().strip(), dbname='bigdata');\nconn.close();\nEOF" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - postgres

  kafka-consumer:
    build:
      context: ./src/kafka-consumer
      dockerfile: Dockerfile
    container_name: kafka_consumer
    networks:
      - big_data_network
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_healthy
    entrypoint:
      "tail -f /dev/null"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: debezium-consumer-group
#      TOPIC: bigdata.public.table1
    healthcheck:
      test: [ "CMD-SHELL", "python - << 'EOF'\nfrom confluent_kafka import Consumer; import os; c = Consumer({'bootstrap.servers': os.getenv('BOOTSTRAP_SERVERS'), 'group.id': os.getenv('GROUP_ID'), 'auto.offset.reset': 'earliest'}); c.subscribe([os.getenv('TOPIC')]); c.close();\nEOF" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - kafka

  spark:
    image: bitnami/spark:3.3.2
    build:
      context: ./spark-jobs
      dockerfile: Dockerfile
    container_name: spark_big_data
    networks:
      - big_data_network
    depends_on:
      - kafka
      - schema-registry
    environment:
      SPARK_MODE: "master"
      SPARK_MASTER_HOST: spark
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_ENDPOINT: http://minio:9000
    volumes:
      - ./spark-jobs:/opt/spark-apps
    command: >
      /opt/bitnami/scripts/spark/entrypoint.sh spark-submit
      --packages "org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.2,io.delta:delta-core_2.12:2.1.0,org.apache.spark:spark-avro_2.12:3.3.2,org.apache.hadoop:hadoop-aws:3.3.4"
      --conf spark.hadoop.fs.s3a.endpoint=${S3_ENDPOINT}
      --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem
      --conf spark.hadoop.fs.s3a.path.style.access=true
      --conf spark.hadoop.fs.s3a.access.key=${AWS_ACCESS_KEY_ID}
      --conf spark.hadoop.fs.s3a.secret.key=${AWS_SECRET_ACCESS_KEY}
      /opt/spark-apps/streaming_job.py
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080 || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - spark

  minio:
    image: minio/minio:latest
    container_name: minio_big_data
    networks:
      - big_data_network
    command: server /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    healthcheck:
      test: [ "CMD-SHELL", "mc alias set _local_ http://localhost:9000 minioadmin minioadmin && mc ls _local_/ || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - spark

volumes:
  pgdata:
  miniodata:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt

networks:
  big_data_network:
    name: big_data_network

